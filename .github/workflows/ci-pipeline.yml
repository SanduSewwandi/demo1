name: Java CI/CD Pipeline with SonarQube

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    name: Build and Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Sanduni2001#
          MYSQL_DATABASE: demodb
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Chrome for Selenium (FIXED)
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip libxss1 libappindicator1 libindicator7 fonts-liberation xvfb
          
          # Install Chrome using direct .deb package (more reliable)
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || true
          sudo apt-get install -y -f
          
          # Get Chrome version and download matching ChromeDriver
          CHROME_VERSION=$(google-chrome --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
          echo "Chrome version: $CHROME_VERSION"
          
          # Download ChromeDriver from Chrome for Testing
          wget -q "https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chromedriver-linux64.zip"
          unzip -q chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          
          # Clean up
          rm -f google-chrome-stable_current_amd64.deb
          rm -rf chromedriver-linux64*
          
          # Verify installations
          echo "=== Chrome Version ==="
          google-chrome --version
          echo "=== ChromeDriver Version ==="
          chromedriver --version
          echo "=== ChromeDriver Path ==="
          which chromedriver

      - name: Wait for MySQL to be ready
        run: |
          sudo apt-get install -y mysql-client
          for i in {1..30}; do
            mysql -h 127.0.0.1 -P 3306 -uroot -p"Sanduni2001#" -e "SELECT 1;" && break
            echo "Waiting for MySQL... attempt $i"
            sleep 3
          done

      - name: Build with Maven
        run: mvn clean compile -DskipTests

      # ============ RUN TESTS WITH COVERAGE (FIXED) ============
      - name: Run Tests with Coverage
        run: |
          # Start virtual display for headless browser testing
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          XVFB_PID=$!
          
          echo "Starting tests with virtual display..."
          mvn clean test jacoco:report
          
          # Stop virtual display
          kill $XVFB_PID 2>/dev/null || true
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/demodb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: Sanduni2001#
          CI: "true"
          FRONTEND_URL: "http://localhost:5173"
          webdriver.chrome.driver: /usr/local/bin/chromedriver
          webdriver.chrome.logfile: /tmp/chromedriver.log
          DISPLAY: ":99"

      # ============ VERIFY COVERAGE REPORT ============
      - name: Verify Coverage Report
        run: |
          echo "=== Checking Coverage Report ==="
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "‚úÖ Coverage report generated successfully!"
            echo "üìä File location: target/site/jacoco/jacoco.xml"
            echo "üìè File size: $(wc -l < target/site/jacoco/jacoco.xml) lines"
            echo "=== First 5 lines of coverage report ==="
            head -5 target/site/jacoco/jacoco.xml
          else
            echo "‚ùå Coverage report not found at target/site/jacoco/jacoco.xml"
            echo "=== Checking target directory structure ==="
            find target -name "*.xml" -type f | head -10
          fi

      # ============ SONARQUBE ANALYSIS (IMPROVED) ============
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=SanduSewwandi_demo1 \
            -Dsonar.organization=sandusewwandi \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.java.coveragePlugin=jacoco \
            -Dsonar.dynamicAnalysis=reuseReports \
            -Dsonar.coverage.exclusions=**/test/**,**/*Test.java,**/*Tests.java,**/config/**,**/entity/**,**/dto/** \
            -Dsonar.test.inclusions=**/*Test.java,**/*Tests.java \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java

      - name: Start Spring Boot Application in Background
        run: |
          # Start Spring Boot on a specific port and run in background
          mvn spring-boot:run -Dspring-boot.run.arguments=--server.port=8080 &
          echo $! > spring-boot.pid
          # Wait for Spring Boot to start
          for i in {1..30}; do
            curl -f http://localhost:8080/actuator/health 2>/dev/null && break
            echo "Waiting for Spring Boot... attempt $i"
            sleep 5
          done
          echo "Spring Boot application started successfully"

      - name: Build React Frontend
        run: |
          # Check if frontend directory exists and build it
          if [ -d "frontend" ]; then
            cd frontend
            npm install
            npm run build
            # Serve the built frontend
            npx serve -s build -p 5173 &
            echo $! > frontend.pid
            cd ..
          else
            echo "Frontend directory not found, skipping frontend build"
          fi

      - name: Wait for Frontend to be ready
        run: |
          if [ -d "frontend" ]; then
            for i in {1..30}; do
              curl -f http://localhost:5173 2>/dev/null && break
              echo "Waiting for Frontend... attempt $i"
              sleep 3
            done
            echo "Frontend is ready"
          else
            echo "No frontend directory, skipping frontend wait"
          fi

      - name: Integration Tests (if any)
        run: |
          # Run any additional integration tests here if needed
          echo "Running integration tests..."
          # mvn verify -DskipUnitTests=true (if you have separate integration tests)
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/demodb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: Sanduni2001#
          CI: "true"
          FRONTEND_URL: "http://localhost:5173"
          webdriver.chrome.driver: /usr/local/bin/chromedriver

      - name: Show Test Results on Failure
        if: failure()
        run: |
          echo "=== Test Failure Details ==="
          find target/surefire-reports -name "*.txt" -type f | while read file; do
            echo "=== Test: $(basename $file) ==="
            cat "$file"
            echo "----------------------------------------"
          done
          # Show Chrome driver logs if they exist
          if [ -f /tmp/chromedriver.log ]; then
            echo "=== Chrome Driver Logs ==="
            cat /tmp/chromedriver.log
          fi
          # Show Xvfb logs if they exist
          echo "=== Current Processes ==="
          ps aux | grep -E "(chrome|Xvfb)" || true

      - name: Stop Applications
        if: always()
        run: |
          # Stop Spring Boot
          if [ -f spring-boot.pid ]; then
            kill $(cat spring-boot.pid) 2>/dev/null || true
            rm -f spring-boot.pid
          fi
          # Stop Frontend
          if [ -f frontend.pid ]; then
            kill $(cat frontend.pid) 2>/dev/null || true
            rm -f frontend.pid
          fi
          # Clean up any remaining processes
          pkill -f "spring-boot:run" 2>/dev/null || true
          pkill -f "serve -s" 2>/dev/null || true
          pkill -f "Xvfb" 2>/dev/null || true

      - name: Generate Test Report
        if: always()
        run: |
          mvn surefire-report:report-only
          mvn site -DgenerateReports=false

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            target/site/**
            target/surefire-reports/**
          retention-days: 30

      - name: Build JAR Package
        if: success()
        run: mvn package -DskipTests

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: target/*.jar
          retention-days: 7

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            target/site/jacoco/**
          retention-days: 30