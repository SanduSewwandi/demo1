name: Java CI/CD Pipeline with SonarQube

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    name: Build and Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Sanduni2001#
          MYSQL_DATABASE: demodb
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Chrome for Selenium
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip libxss1 libappindicator1 libindicator7 fonts-liberation xvfb
          
          # Install Chrome
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || true
          sudo apt-get install -y -f
          
          # Install ChromeDriver (simplified - use fixed version)
          CHROME_VERSION=$(google-chrome --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "Chrome version: $CHROME_VERSION"
          wget -q "https://chromedriver.storage.googleapis.com/120.0.6099.109/chromedriver_linux64.zip"
          unzip -q chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          
          # Verify
          echo "=== Chrome Version ==="
          google-chrome --version
          echo "=== ChromeDriver Version ==="
          chromedriver --version

      - name: Wait for MySQL to be ready
        run: |
          sudo apt-get install -y mysql-client
          for i in {1..30}; do
            mysql -h 127.0.0.1 -P 3306 -uroot -p"Sanduni2001#" -e "SELECT 1;" && break
            echo "Waiting for MySQL... attempt $i"
            sleep 3
          done
          echo "MySQL is ready!"

      - name: Build with Maven
        run: mvn clean compile -DskipTests

      # ============ RUN UNIT TESTS ONLY (SKIP SELENIUM) ============
      - name: Run Unit Tests with Coverage
        run: |
          echo "Running unit tests (excluding Selenium)..."
          mvn test -Dtest=!*selenium* jacoco:report
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/demodb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: Sanduni2001#

      # ============ VERIFY COVERAGE REPORT ============
      - name: Verify Coverage Report
        run: |
          echo "=== Checking Coverage Report ==="
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "‚úÖ Coverage report generated successfully!"
            echo "üìä File location: target/site/jacoco/jacoco.xml"
            echo "üìè File size: $(wc -l < target/site/jacoco/jacoco.xml) lines"
            echo "=== Coverage summary ==="
            # Extract coverage information from the XML
            LINE_RATE=$(grep -oP 'line-rate="\K[0-9.]+' target/site/jacoco/jacoco.xml | head -1)
            BRANCH_RATE=$(grep -oP 'branch-rate="\K[0-9.]+' target/site/jacoco/jacoco.xml | head -1)
            echo "Line Coverage: $(echo "scale=2; $LINE_RATE * 100" | bc)%"
            echo "Branch Coverage: $(echo "scale=2; $BRANCH_RATE * 100" | bc)%"
          else
            echo "‚ùå Coverage report not found at target/site/jacoco/jacoco.xml"
            echo "=== Checking for alternative locations ==="
            find . -name "jacoco.xml" -type f | head -10
            echo "=== Target directory contents ==="
            find target -name "*.xml" -type f | head -10
          fi

      # ============ SONARQUBE ANALYSIS ============
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Starting SonarQube analysis..."
          mvn sonar:sonar \
            -Dsonar.projectKey=SanduSewwandi_demo1 \
            -Dsonar.organization=sandusewwandi \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.java.coveragePlugin=jacoco \
            -Dsonar.dynamicAnalysis=reuseReports \
            -Dsonar.coverage.exclusions=**/test/**,**/*Test.java,**/*Tests.java,**/config/**,**/entity/**,**/dto/**,**/selenium/** \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java
        continue-on-error: false

      # ============ TRY SELENIUM TESTS SEPARATELY (OPTIONAL) ============
      - name: Run Selenium Tests (Optional)
        if: always()  # Run even if previous steps failed
        continue-on-error: true  # Don't fail build if Selenium tests fail
        run: |
          echo "=== Attempting Selenium Tests ==="
          
          # Start virtual display
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          XVFB_PID=$!
          sleep 5
          
          # Start Spring Boot for frontend
          echo "Starting Spring Boot application..."
          mvn spring-boot:run -Dspring-boot.run.arguments=--server.port=8080 &
          SPRING_PID=$!
          sleep 15  # Wait longer for Spring Boot to start
          
          # Check if Spring Boot is running
          if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
            echo "‚úÖ Spring Boot is running"
          
            # Start frontend if directory exists
            if [ -d "frontend" ]; then
              echo "Starting React frontend..."
              cd frontend
              npm install
              npm run dev &
              FRONTEND_PID=$!
              cd ..
              sleep 10
            fi
          
            # Run Selenium tests with longer timeout
            echo "Running Selenium tests..."
            mvn test -Dtest=*selenium* -Dsurefire.timeout=120
          else
            echo "‚ùå Spring Boot failed to start, skipping Selenium tests"
          fi
          
          # Cleanup
          echo "Cleaning up..."
          kill $XVFB_PID 2>/dev/null || true
          kill $SPRING_PID 2>/dev/null || true
          if [ -n "$FRONTEND_PID" ]; then
            kill $FRONTEND_PID 2>/dev/null || true
          fi
          pkill -f "spring-boot:run" 2>/dev/null || true
          pkill -f "npm" 2>/dev/null || true
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/demodb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: Sanduni2001#
          CI: "true"
          FRONTEND_URL: "http://localhost:5173"
          DISPLAY: ":99"
          webdriver.chrome.driver: /usr/local/bin/chromedriver

      # ============ BUILD FINAL ARTIFACTS ============
      - name: Build JAR Package
        run: mvn package -DskipTests

      - name: Show Test Results
        if: always()
        run: |
          echo "=== Test Results Summary ==="
          if [ -d "target/surefire-reports" ]; then
            echo "Test reports generated:"
            find target/surefire-reports -name "*.txt" -type f | while read file; do
              TEST_NAME=$(basename "$file" .txt)
              if tail -1 "$file" | grep -q "FAILURE\|ERROR"; then
                echo "‚ùå $TEST_NAME: FAILED"
              else
                echo "‚úÖ $TEST_NAME: PASSED"
              fi
            done
          else
            echo "No test reports found"
          fi

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            target/site/**
            target/surefire-reports/**
          retention-days: 30

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            target/site/jacoco/**
          retention-days: 30

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: target/*.jar
          retention-days: 7

      - name: Final Status
        if: always()
        run: |
          echo "=== Pipeline Status ==="
          echo "‚úÖ Build completed"
          echo "‚úÖ Unit tests executed" 
          echo "‚úÖ Coverage report generated"
          echo "‚úÖ SonarQube analysis submitted"
          echo "‚úÖ JAR package built"
          echo "‚ö†Ô∏è  Selenium tests run separately (may fail without affecting build)"