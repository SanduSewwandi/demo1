name: Java CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    name: Build and Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: demodb
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Chrome for Selenium
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          # Install Google Chrome
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          # Install ChromeDriver
          CHROME_VERSION=$(google-chrome --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
          wget -q "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROME_VERSION}/linux64/chromedriver-linux64.zip"
          sudo unzip -q chromedriver-linux64.zip -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver-linux64/chromedriver
          sudo ln -sf /usr/local/bin/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          # Verify installation
          google-chrome --version
          chromedriver --version

      - name: Wait for MySQL to be ready
        run: |
          sudo apt-get install -y mysql-client
          for i in {1..30}; do
            mysql -h 127.0.0.1 -P 3306 -uroot -proot -e "SELECT 1;" && break
            echo "Waiting for MySQL... attempt $i"
            sleep 3
          done

      - name: Build with Maven
        run: mvn clean compile -DskipTests

      - name: Start Spring Boot Application in Background
        run: |
          # Start Spring Boot on a specific port and run in background
          mvn spring-boot:run -Dspring-boot.run.arguments=--server.port=8080 &
          echo $! > spring-boot.pid
          # Wait for Spring Boot to start
          for i in {1..30}; do
            curl -f http://localhost:8080/actuator/health 2>/dev/null && break
            echo "Waiting for Spring Boot... attempt $i"
            sleep 5
          done
          echo "Spring Boot application started successfully"

      - name: Build React Frontend
        run: |
          # Check if frontend directory exists and build it
          if [ -d "frontend" ]; then
            cd frontend
            npm install
            npm run build
            # Serve the built frontend
            npx serve -s build -p 5173 &
            echo $! > frontend.pid
            cd ..
          else
            echo "Frontend directory not found, assuming frontend is already running"
          fi

      - name: Wait for Frontend to be ready
        run: |
          for i in {1..30}; do
            curl -f http://localhost:5173 2>/dev/null && break
            echo "Waiting for Frontend... attempt $i"
            sleep 3
          done
          echo "Frontend is ready"

      - name: Run Unit Tests with Retry
        run: |
          # Run tests with retry logic for flaky tests
          MAX_RETRIES=2
          ATTEMPT=0
          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "Running tests (Attempt $((ATTEMPT+1)))"
            mvn test -Dmaven.test.failure.ignore=true
            if [ $? -eq 0 ]; then
              echo "Tests passed on attempt $((ATTEMPT+1))"
              break
            else
              ATTEMPT=$((ATTEMPT+1))
              if [ $ATTEMPT -le $MAX_RETRIES ]; then
                echo "Tests failed, retrying in 5 seconds..."
                sleep 5
              else
                echo "Tests failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/demodb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: Sanduni2001#
          CI: "true"
          FRONTEND_URL: "http://localhost:5173"
          # Selenium specific environment variables
          webdriver.chrome.driver: /usr/local/bin/chromedriver
          webdriver.chrome.logfile: /tmp/chromedriver.log

      - name: Show Test Results on Failure
        if: failure()
        run: |
          echo "=== Test Failure Details ==="
          find target/surefire-reports -name "*.txt" -type f | while read file; do
            echo "=== Test: $(basename $file) ==="
            cat "$file"
            echo "----------------------------------------"
          done
          # Show Chrome driver logs if they exist
          if [ -f /tmp/chromedriver.log ]; then
            echo "=== Chrome Driver Logs ==="
            tail -50 /tmp/chromedriver.log
          fi

      - name: Stop Applications
        if: always()
        run: |
          # Stop Spring Boot
          if [ -f spring-boot.pid ]; then
            kill $(cat spring-boot.pid) 2>/dev/null || true
            rm -f spring-boot.pid
          fi
          # Stop Frontend
          if [ -f frontend.pid ]; then
            kill $(cat frontend.pid) 2>/dev/null || true
            rm -f frontend.pid
          fi

      - name: Generate Test Report
        if: always()
        run: |
          mvn surefire-report:report-only
          mvn site -DgenerateReports=false

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            target/site/**
            target/surefire-reports/**
          retention-days: 30

      - name: Build JAR Package
        if: success()
        run: mvn package -DskipTests

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: target/*.jar
          retention-days: 7